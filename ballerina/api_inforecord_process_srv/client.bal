// First commit
// AUTO-GENERATED FILE. DO NOT MODIFY.
// This file is auto-generated by the Ballerina OpenAPI tool.

// Copyright (c) 2024, WSO2 LLC. (http://www.wso2.org).
//
// WSO2 LLC. licenses this file to you under the Apache License,
// Version 2.0 (the "License"); you may not use this file except
// in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.

import ballerina/http;
import ballerinax/sap;

#
#
# This synchronous inbound service enables you to create, update, and delete purchasing info records with conditions. The service contains general data, purchase organization data and conditions. It is based on the OData protocol. The information is sent in the request as a payload.All information is used when creating a purchasing info record, including conditions are checked for authorizations. Once the purchasinginfo record has been created, the purchasing info record number is sent in the response. If there are any issues when the purchasing info recordis created, the system displays error messages in the response.
public isolated client class Client {
    final sap:Client clientEp;

    # Gets invoked to initialize the `connector`.
    #
    # + config - The configurations to be used when initializing the `connector` 
    # + serviceUrl - URL of the target service 
    # + return - An error if connector initialization failed 
    public isolated function init(ConnectionConfig config, string hostname, int port = 443) returns error? {
        string serviceUrl = string `https://${hostname}:${port}/sap/opu/odata/sap/API_INFORECORD_PROCESS_SRV`;
        http:ClientConfiguration httpClientConfig = {auth: config.auth, httpVersion: config.httpVersion, timeout: config.timeout, forwarded: config.forwarded, poolConfig: config.poolConfig, compression: config.compression, circuitBreaker: config.circuitBreaker, retryConfig: config.retryConfig, validation: config.validation};
        do {
            if config.http1Settings is ClientHttp1Settings {
                ClientHttp1Settings settings = check config.http1Settings.ensureType(ClientHttp1Settings);
                httpClientConfig.http1Settings = {...settings};
            }
            if config.http2Settings is http:ClientHttp2Settings {
                httpClientConfig.http2Settings = check config.http2Settings.ensureType(http:ClientHttp2Settings);
            }
            if config.cache is http:CacheConfig {
                httpClientConfig.cache = check config.cache.ensureType(http:CacheConfig);
            }
            if config.responseLimits is http:ResponseLimitConfigs {
                httpClientConfig.responseLimits = check config.responseLimits.ensureType(http:ResponseLimitConfigs);
            }
            if config.secureSocket is http:ClientSecureSocket {
                httpClientConfig.secureSocket = check config.secureSocket.ensureType(http:ClientSecureSocket);
            }
            if config.proxy is http:ProxyConfig {
                httpClientConfig.proxy = check config.proxy.ensureType(http:ProxyConfig);
            }
        }
        sap:Client httpEp = check new (serviceUrl, httpClientConfig);
        self.clientEp = httpEp;
        return;
    }

    # Creates the pricing condition scales details of a condition record in the system.
    #
    # + headers - Headers to be sent with the request 
    # + payload - New entity 
    # + return - Created entity 
    remote isolated function createA_PurInfoRecdPrcgCndnScale(CreateA_PurInfoRecdPrcgCndnScale payload, map<string|string[]> headers = {}) returns A_PurInfoRecdPrcgCndnScaleWrapper|error {
        string resourcePath = string `/A_PurInfoRecdPrcgCndnScale`;
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, headers);
    }

    # Creates the pricing condition validity of a purchasing info record.
    #
    # + headers - Headers to be sent with the request 
    # + payload - New entity 
    # + return - Created entity 
    remote isolated function createA_PurInfoRecdPrcgCndnValidity(CreateA_PurInfoRecdPrcgCndnValidity payload, map<string|string[]> headers = {}) returns A_PurInfoRecdPrcgCndnValidityWrapper|error {
        string resourcePath = string `/A_PurInfoRecdPrcgCndnValidity`;
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, headers);
    }

    # Creates the supplementary pricing conditions of a purchasing info record.
    #
    # + headers - Headers to be sent with the request 
    # + payload - New entity 
    # + return - Created entity 
    remote isolated function createA_PurInfoRecdSuplmntPrcgCndn(CreateA_PurInfoRecdSuplmntPrcgCndn payload, map<string|string[]> headers = {}) returns A_PurInfoRecdSuplmntPrcgCndnWrapper|error {
        string resourcePath = string `/A_PurInfoRecdSuplmntPrcgCndn`;
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, headers);
    }

    # Creates a purchasing info record.
    #
    # + headers - Headers to be sent with the request 
    # + payload - New entity 
    # + return - Created entity 
    remote isolated function createA_PurchasingInfoRecord(CreateA_PurchasingInfoRecord payload, map<string|string[]> headers = {}) returns A_PurchasingInfoRecordWrapper|error {
        string resourcePath = string `/A_PurchasingInfoRecord`;
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, headers);
    }

    # Creates the purchasing PO text of a purchasing info record.
    #
    # + headers - Headers to be sent with the request 
    # + payload - New entity 
    # + return - Created entity 
    remote isolated function createA_PurgInfoRecdOrgPOText(CreateA_PurgInfoRecdOrgPOText payload, map<string|string[]> headers = {}) returns A_PurgInfoRecdOrgPOTextWrapper|error {
        string resourcePath = string `/A_PurgInfoRecdOrgPOText`;
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, headers);
    }

    # Creates a purchasing info record in the system.
    #
    # + headers - Headers to be sent with the request 
    # + payload - New entity 
    # + return - Created entity 
    remote isolated function createA_PurgInfoRecdOrgPlantData(CreateA_PurgInfoRecdOrgPlantData payload, map<string|string[]> headers = {}) returns A_PurgInfoRecdOrgPlantDataWrapper|error {
        string resourcePath = string `/A_PurgInfoRecdOrgPlantData`;
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, headers);
    }

    # Creates the pricing conditions of a purchasing info record.
    #
    # + ConditionRecord - Number of Condition Record
    # + headers - Headers to be sent with the request 
    # + payload - New entity 
    # + return - Created entity 
    remote isolated function createPurInfoRecdPrcgCndnValidityOfA_PurInfoRecdPrcgCndn(string ConditionRecord, CreateA_PurInfoRecdPrcgCndnValidity payload, map<string|string[]> headers = {}) returns A_PurInfoRecdPrcgCndnValidityWrapper|error {
        string resourcePath = string `/A_PurInfoRecdPrcgCndn('${getEncodedUri(ConditionRecord)}')/to_PurInfoRecdPrcgCndnValidity`;
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, headers);
    }

    # Creates the supplementary pricing conditions of a purchasing info record.
    #
    # + ConditionRecord - Number of Condition Record
    # + ConditionSequentialNumber - Sequential number of the condition
    # + headers - Headers to be sent with the request 
    # + payload - New entity 
    # + return - Created entity 
    remote isolated function createPurInfoRecdPrcgCndnValidityOfA_PurInfoRecdSuplmntPrcgCndn(string ConditionRecord, string ConditionSequentialNumber, CreateA_PurInfoRecdPrcgCndnValidity payload, map<string|string[]> headers = {}) returns A_PurInfoRecdPrcgCndnValidityWrapper|error {
        string resourcePath = string `/A_PurInfoRecdSuplmntPrcgCndn(ConditionRecord='${getEncodedUri(ConditionRecord)}',ConditionSequentialNumber='${getEncodedUri(ConditionSequentialNumber)}')/to_PurInfoRecdPrcgCndnValidity`;
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, headers);
    }

    # Creates the pricing condition validity details of a purchasing info record.
    #
    # + PurchasingInfoRecord - Purchasing Info Record Number
    # + PurchasingInfoRecordCategory - Purchasing info record category
    # + PurchasingOrganization - Purchasing Organization
    # + Plant - Plant
    # + headers - Headers to be sent with the request 
    # + payload - New entity 
    # + return - Created entity 
    remote isolated function createPurInfoRecdPrcgCndnValidityOfA_PurgInfoRecdOrgPlantData(string PurchasingInfoRecord, string PurchasingInfoRecordCategory, string PurchasingOrganization, string Plant, CreateA_PurInfoRecdPrcgCndnValidity payload, map<string|string[]> headers = {}) returns A_PurInfoRecdPrcgCndnValidityWrapper|error {
        string resourcePath = string `/A_PurgInfoRecdOrgPlantData(PurchasingInfoRecord='${getEncodedUri(PurchasingInfoRecord)}',PurchasingInfoRecordCategory='${getEncodedUri(PurchasingInfoRecordCategory)}',PurchasingOrganization='${getEncodedUri(PurchasingOrganization)}',Plant='${getEncodedUri(Plant)}')/to_PurInfoRecdPrcgCndnValidity`;
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, headers);
    }

    # Creates the purchasing PO text of a purchasing info record with respect to a purchasing organization.
    #
    # + PurchasingInfoRecord - Purchasing Info Record Number
    # + PurchasingInfoRecordCategory - Purchasing info record category
    # + PurchasingOrganization - Purchasing Organization
    # + Plant - Plant
    # + headers - Headers to be sent with the request 
    # + payload - New entity 
    # + return - Created entity 
    remote isolated function createPurInfoRecdPurOrgTextOfA_PurgInfoRecdOrgPlantData(string PurchasingInfoRecord, string PurchasingInfoRecordCategory, string PurchasingOrganization, string Plant, CreateA_PurgInfoRecdOrgPOText payload, map<string|string[]> headers = {}) returns A_PurgInfoRecdOrgPOTextWrapper|error {
        string resourcePath = string `/A_PurgInfoRecdOrgPlantData(PurchasingInfoRecord='${getEncodedUri(PurchasingInfoRecord)}',PurchasingInfoRecordCategory='${getEncodedUri(PurchasingInfoRecordCategory)}',PurchasingOrganization='${getEncodedUri(PurchasingOrganization)}',Plant='${getEncodedUri(Plant)}')/to_PurInfoRecdPurOrgText`;
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, headers);
    }

    # Creates the supplementary pricing conditions of a purchasing info record.
    #
    # + ConditionRecord - Number of Condition Record
    # + headers - Headers to be sent with the request 
    # + payload - New entity 
    # + return - Created entity 
    remote isolated function createPurInfoRecdSuplmntPrcgCndnOfA_PurInfoRecdPrcgCndn(string ConditionRecord, CreateA_PurInfoRecdSuplmntPrcgCndn payload, map<string|string[]> headers = {}) returns A_PurInfoRecdSuplmntPrcgCndnWrapper|error {
        string resourcePath = string `/A_PurInfoRecdPrcgCndn('${getEncodedUri(ConditionRecord)}')/to_PurInfoRecdSuplmntPrcgCndn`;
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, headers);
    }

    # Creates the pricing condition scales details with respect to the specified condition record in the system.
    #
    # + ConditionRecord - Number of Condition Record
    # + headers - Headers to be sent with the request 
    # + payload - New entity 
    # + return - Created entity 
    remote isolated function createPurgInfoPricingCndnRecdScaleOfA_PurInfoRecdPrcgCndn(string ConditionRecord, CreateA_PurInfoRecdPrcgCndnScale payload, map<string|string[]> headers = {}) returns A_PurInfoRecdPrcgCndnScaleWrapper|error {
        string resourcePath = string `/A_PurInfoRecdPrcgCndn('${getEncodedUri(ConditionRecord)}')/to_PurgInfoPricingCndnRecdScale`;
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, headers);
    }

    # Creates the pricing condition scales details with respect to the specified supplementary condition record in the system.
    #
    # + ConditionRecord - Number of Condition Record
    # + ConditionSequentialNumber - Sequential number of the condition
    # + headers - Headers to be sent with the request 
    # + payload - New entity 
    # + return - Created entity 
    remote isolated function createPurgInfoPricingCndnRecdScaleOfA_PurInfoRecdSuplmntPrcgCndn(string ConditionRecord, string ConditionSequentialNumber, CreateA_PurInfoRecdPrcgCndnScale payload, map<string|string[]> headers = {}) returns A_PurInfoRecdPrcgCndnScaleWrapper|error {
        string resourcePath = string `/A_PurInfoRecdSuplmntPrcgCndn(ConditionRecord='${getEncodedUri(ConditionRecord)}',ConditionSequentialNumber='${getEncodedUri(ConditionSequentialNumber)}')/to_PurgInfoPricingCndnRecdScale`;
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, headers);
    }

    # Creates the purchasing data of a purchasing info record.
    #
    # + PurchasingInfoRecord - Purchasing Info Record Number
    # + headers - Headers to be sent with the request 
    # + payload - New entity 
    # + return - Created entity 
    remote isolated function createPurgInfoRecdOrgPlantDataOfA_PurchasingInfoRecord(string PurchasingInfoRecord, CreateA_PurgInfoRecdOrgPlantData payload, map<string|string[]> headers = {}) returns A_PurgInfoRecdOrgPlantDataWrapper|error {
        string resourcePath = string `/A_PurchasingInfoRecord('${getEncodedUri(PurchasingInfoRecord)}')/to_PurgInfoRecdOrgPlantData`;
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, headers);
    }

    # Deletes the pricing condition scales details of a condition record in the system.
    #
    # + ConditionRecord - Number of Condition Record
    # + ConditionSequentialNumber - Sequential number of the condition
    # + ConditionScaleLine - Current number of the line scale
    # + headers - Headers to be sent with the request 
    # + return - Success 
    remote isolated function deleteA_PurInfoRecdPrcgCndnScale(string ConditionRecord, string ConditionSequentialNumber, string ConditionScaleLine, map<string|string[]> headers = {}) returns http:Response|error {
        string resourcePath = string `/A_PurInfoRecdPrcgCndnScale(ConditionRecord='${getEncodedUri(ConditionRecord)}',ConditionSequentialNumber='${getEncodedUri(ConditionSequentialNumber)}',ConditionScaleLine='${getEncodedUri(ConditionScaleLine)}')`;
        return self.clientEp->delete(resourcePath, headers = headers);
    }

    # Deletes the supplementary pricing conditions of a purchasing info record.
    #
    # + ConditionRecord - Number of Condition Record
    # + ConditionSequentialNumber - Sequential number of the condition
    # + headers - Headers to be sent with the request 
    # + return - Success 
    remote isolated function deleteA_PurInfoRecdSuplmntPrcgCndn(string ConditionRecord, string ConditionSequentialNumber, map<string|string[]> headers = {}) returns http:Response|error {
        string resourcePath = string `/A_PurInfoRecdSuplmntPrcgCndn(ConditionRecord='${getEncodedUri(ConditionRecord)}',ConditionSequentialNumber='${getEncodedUri(ConditionSequentialNumber)}')`;
        return self.clientEp->delete(resourcePath, headers = headers);
    }

    # Deletes the purchasing PO text of a purchasing info record.
    #
    # + Language - Language Key
    # + DocumentText - Text ID
    # + TechnicalObjectType - Texts: application object
    # + ArchObjectNumber - Name
    # + PurchasingInfoRecord - Purchasing Info Record Number
    # + PurchasingOrganization - Purchasing Organization
    # + PurchasingInfoRecordCategory - Purchasing info record category
    # + Plant - Plant
    # + headers - Headers to be sent with the request 
    # + return - Success 
    remote isolated function deleteA_PurgInfoRecdOrgPOText(string Language, string DocumentText, string TechnicalObjectType, string ArchObjectNumber, string PurchasingInfoRecord, string PurchasingOrganization, string PurchasingInfoRecordCategory, string Plant, map<string|string[]> headers = {}) returns http:Response|error {
        string resourcePath = string `/A_PurgInfoRecdOrgPOText(Language='${getEncodedUri(Language)}',DocumentText='${getEncodedUri(DocumentText)}',TechnicalObjectType='${getEncodedUri(TechnicalObjectType)}',ArchObjectNumber='${getEncodedUri(ArchObjectNumber)}',PurchasingInfoRecord='${getEncodedUri(PurchasingInfoRecord)}',PurchasingOrganization='${getEncodedUri(PurchasingOrganization)}',PurchasingInfoRecordCategory='${getEncodedUri(PurchasingInfoRecordCategory)}',Plant='${getEncodedUri(Plant)}')`;
        return self.clientEp->delete(resourcePath, headers = headers);
    }

    # Reads the pricing conditions of a purchasing record.
    #
    # + ConditionRecord - Number of Condition Record
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Retrieved entity 
    remote isolated function getA_PurInfoRecdPrcgCndn(string ConditionRecord, map<string|string[]> headers = {}, *GetA_PurInfoRecdPrcgCndnQueries queries) returns A_PurInfoRecdPrcgCndnWrapper|error {
        string resourcePath = string `/A_PurInfoRecdPrcgCndn('${getEncodedUri(ConditionRecord)}')`;
        map<Encoding> queryParamEncoding = {"$select": {style: FORM, explode: false}, "$expand": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Reads the pricing condition scales details of a condition record in the system.
    #
    # + ConditionRecord - Number of Condition Record
    # + ConditionSequentialNumber - Sequential number of the condition
    # + ConditionScaleLine - Current number of the line scale
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Retrieved entity 
    remote isolated function getA_PurInfoRecdPrcgCndnScale(string ConditionRecord, string ConditionSequentialNumber, string ConditionScaleLine, map<string|string[]> headers = {}, *GetA_PurInfoRecdPrcgCndnScaleQueries queries) returns A_PurInfoRecdPrcgCndnScaleWrapper|error {
        string resourcePath = string `/A_PurInfoRecdPrcgCndnScale(ConditionRecord='${getEncodedUri(ConditionRecord)}',ConditionSequentialNumber='${getEncodedUri(ConditionSequentialNumber)}',ConditionScaleLine='${getEncodedUri(ConditionScaleLine)}')`;
        map<Encoding> queryParamEncoding = {"$select": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Reads the pricing condition validity details of a purchasing info record in the system.
    #
    # + ConditionRecord - Number of Condition Record
    # + ConditionValidityEndDate - Validity end date of the condition record
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Retrieved entity 
    remote isolated function getA_PurInfoRecdPrcgCndnValidity(string ConditionRecord, string ConditionValidityEndDate, map<string|string[]> headers = {}, *GetA_PurInfoRecdPrcgCndnValidityQueries queries) returns A_PurInfoRecdPrcgCndnValidityWrapper|error {
        string resourcePath = string `/A_PurInfoRecdPrcgCndnValidity(ConditionRecord='${getEncodedUri(ConditionRecord)}',ConditionValidityEndDate=datetime'${getEncodedUri(ConditionValidityEndDate)}')`;
        map<Encoding> queryParamEncoding = {"$select": {style: FORM, explode: false}, "$expand": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Reads the supplementary pricing conditions of a purchasing info record.
    #
    # + ConditionRecord - Number of Condition Record
    # + ConditionSequentialNumber - Sequential number of the condition
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Retrieved entity 
    remote isolated function getA_PurInfoRecdSuplmntPrcgCndn(string ConditionRecord, string ConditionSequentialNumber, map<string|string[]> headers = {}, *GetA_PurInfoRecdSuplmntPrcgCndnQueries queries) returns A_PurInfoRecdSuplmntPrcgCndnWrapper|error {
        string resourcePath = string `/A_PurInfoRecdSuplmntPrcgCndn(ConditionRecord='${getEncodedUri(ConditionRecord)}',ConditionSequentialNumber='${getEncodedUri(ConditionSequentialNumber)}')`;
        map<Encoding> queryParamEncoding = {"$select": {style: FORM, explode: false}, "$expand": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Reads the general information of a purchasing info record.
    #
    # + PurchasingInfoRecord - Purchasing Info Record Number
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Retrieved entity 
    remote isolated function getA_PurchasingInfoRecord(string PurchasingInfoRecord, map<string|string[]> headers = {}, *GetA_PurchasingInfoRecordQueries queries) returns A_PurchasingInfoRecordWrapper|error {
        string resourcePath = string `/A_PurchasingInfoRecord('${getEncodedUri(PurchasingInfoRecord)}')`;
        map<Encoding> queryParamEncoding = {"$select": {style: FORM, explode: false}, "$expand": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Reads the purchasing PO text of a purchasing info record.
    #
    # + Language - Language Key
    # + DocumentText - Text ID
    # + TechnicalObjectType - Texts: application object
    # + ArchObjectNumber - Name
    # + PurchasingInfoRecord - Purchasing Info Record Number
    # + PurchasingOrganization - Purchasing Organization
    # + PurchasingInfoRecordCategory - Purchasing info record category
    # + Plant - Plant
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Retrieved entity 
    remote isolated function getA_PurgInfoRecdOrgPOText(string Language, string DocumentText, string TechnicalObjectType, string ArchObjectNumber, string PurchasingInfoRecord, string PurchasingOrganization, string PurchasingInfoRecordCategory, string Plant, map<string|string[]> headers = {}, *GetA_PurgInfoRecdOrgPOTextQueries queries) returns A_PurgInfoRecdOrgPOTextWrapper|error {
        string resourcePath = string `/A_PurgInfoRecdOrgPOText(Language='${getEncodedUri(Language)}',DocumentText='${getEncodedUri(DocumentText)}',TechnicalObjectType='${getEncodedUri(TechnicalObjectType)}',ArchObjectNumber='${getEncodedUri(ArchObjectNumber)}',PurchasingInfoRecord='${getEncodedUri(PurchasingInfoRecord)}',PurchasingOrganization='${getEncodedUri(PurchasingOrganization)}',PurchasingInfoRecordCategory='${getEncodedUri(PurchasingInfoRecordCategory)}',Plant='${getEncodedUri(Plant)}')`;
        map<Encoding> queryParamEncoding = {"$select": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Reads the purchasing information of a purchasing info record in the system.
    #
    # + PurchasingInfoRecord - Purchasing Info Record Number
    # + PurchasingInfoRecordCategory - Purchasing info record category
    # + PurchasingOrganization - Purchasing Organization
    # + Plant - Plant
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Retrieved entity 
    remote isolated function getA_PurgInfoRecdOrgPlantData(string PurchasingInfoRecord, string PurchasingInfoRecordCategory, string PurchasingOrganization, string Plant, map<string|string[]> headers = {}, *GetA_PurgInfoRecdOrgPlantDataQueries queries) returns A_PurgInfoRecdOrgPlantDataWrapper|error {
        string resourcePath = string `/A_PurgInfoRecdOrgPlantData(PurchasingInfoRecord='${getEncodedUri(PurchasingInfoRecord)}',PurchasingInfoRecordCategory='${getEncodedUri(PurchasingInfoRecordCategory)}',PurchasingOrganization='${getEncodedUri(PurchasingOrganization)}',Plant='${getEncodedUri(Plant)}')`;
        map<Encoding> queryParamEncoding = {"$select": {style: FORM, explode: false}, "$expand": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Reads the pricing condition validity details of a purchasing info record in the system.
    #
    # + ConditionRecord - Number of Condition Record
    # + ConditionValidityEndDate - Validity end date of the condition record
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Retrieved entity 
    remote isolated function getPurInfoRecdPrcgCndnOfA_PurInfoRecdPrcgCndnValidity(string ConditionRecord, string ConditionValidityEndDate, map<string|string[]> headers = {}, *GetPurInfoRecdPrcgCndnOfA_PurInfoRecdPrcgCndnValidityQueries queries) returns A_PurInfoRecdPrcgCndnWrapper|error {
        string resourcePath = string `/A_PurInfoRecdPrcgCndnValidity(ConditionRecord='${getEncodedUri(ConditionRecord)}',ConditionValidityEndDate=datetime'${getEncodedUri(ConditionValidityEndDate)}')/to_PurInfoRecdPrcgCndn`;
        map<Encoding> queryParamEncoding = {"$select": {style: FORM, explode: false}, "$expand": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Reads the supplementary pricing conditions of a purchasing info record.
    #
    # + ConditionRecord - Number of Condition Record
    # + ConditionSequentialNumber - Sequential number of the condition
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Retrieved entity 
    remote isolated function getPurInfoRecdPrcgCndnOfA_PurInfoRecdSuplmntPrcgCndn(string ConditionRecord, string ConditionSequentialNumber, map<string|string[]> headers = {}, *GetPurInfoRecdPrcgCndnOfA_PurInfoRecdSuplmntPrcgCndnQueries queries) returns A_PurInfoRecdPrcgCndnWrapper|error {
        string resourcePath = string `/A_PurInfoRecdSuplmntPrcgCndn(ConditionRecord='${getEncodedUri(ConditionRecord)}',ConditionSequentialNumber='${getEncodedUri(ConditionSequentialNumber)}')/to_PurInfoRecdPrcgCndn`;
        map<Encoding> queryParamEncoding = {"$select": {style: FORM, explode: false}, "$expand": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Reads the general information of a purchasing info record.
    #
    # + ConditionRecord - Number of Condition Record
    # + ConditionValidityEndDate - Validity end date of the condition record
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Retrieved entity 
    remote isolated function getPurgInfoRecdOfA_PurInfoRecdPrcgCndnValidity(string ConditionRecord, string ConditionValidityEndDate, map<string|string[]> headers = {}, *GetPurgInfoRecdOfA_PurInfoRecdPrcgCndnValidityQueries queries) returns A_PurchasingInfoRecordWrapper|error {
        string resourcePath = string `/A_PurInfoRecdPrcgCndnValidity(ConditionRecord='${getEncodedUri(ConditionRecord)}',ConditionValidityEndDate=datetime'${getEncodedUri(ConditionValidityEndDate)}')/to_PurgInfoRecd`;
        map<Encoding> queryParamEncoding = {"$select": {style: FORM, explode: false}, "$expand": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Reads the purchasing information of a purchasing info record.
    #
    # + PurchasingInfoRecord - Purchasing Info Record Number
    # + PurchasingInfoRecordCategory - Purchasing info record category
    # + PurchasingOrganization - Purchasing Organization
    # + Plant - Plant
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Retrieved entity 
    remote isolated function getPurgInfoRecdOfA_PurgInfoRecdOrgPlantData(string PurchasingInfoRecord, string PurchasingInfoRecordCategory, string PurchasingOrganization, string Plant, map<string|string[]> headers = {}, *GetPurgInfoRecdOfA_PurgInfoRecdOrgPlantDataQueries queries) returns A_PurchasingInfoRecordWrapper|error {
        string resourcePath = string `/A_PurgInfoRecdOrgPlantData(PurchasingInfoRecord='${getEncodedUri(PurchasingInfoRecord)}',PurchasingInfoRecordCategory='${getEncodedUri(PurchasingInfoRecordCategory)}',PurchasingOrganization='${getEncodedUri(PurchasingOrganization)}',Plant='${getEncodedUri(Plant)}')/to_PurgInfoRecd`;
        map<Encoding> queryParamEncoding = {"$select": {style: FORM, explode: false}, "$expand": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Reads the purchasing information of a purchasing info record.
    #
    # + ConditionRecord - Number of Condition Record
    # + ConditionValidityEndDate - Validity end date of the condition record
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Retrieved entity 
    remote isolated function getPurgInfoRecdOrgPlantDataOfA_PurInfoRecdPrcgCndnValidity(string ConditionRecord, string ConditionValidityEndDate, map<string|string[]> headers = {}, *GetPurgInfoRecdOrgPlantDataOfA_PurInfoRecdPrcgCndnValidityQueries queries) returns A_PurgInfoRecdOrgPlantDataWrapper|error {
        string resourcePath = string `/A_PurInfoRecdPrcgCndnValidity(ConditionRecord='${getEncodedUri(ConditionRecord)}',ConditionValidityEndDate=datetime'${getEncodedUri(ConditionValidityEndDate)}')/to_PurgInfoRecdOrgPlantData`;
        map<Encoding> queryParamEncoding = {"$select": {style: FORM, explode: false}, "$expand": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Reads the pricing condition scales details of all condition records in the system.
    #
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Retrieved entities 
    remote isolated function listA_PurInfoRecdPrcgCndnScales(map<string|string[]> headers = {}, *ListA_PurInfoRecdPrcgCndnScalesQueries queries) returns CollectionOfA_PurInfoRecdPrcgCndnScaleWrapper|error {
        string resourcePath = string `/A_PurInfoRecdPrcgCndnScale`;
        map<Encoding> queryParamEncoding = {"$orderby": {style: FORM, explode: false}, "$select": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Reads the pricing condition validity details of a purchasing info record.
    #
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Retrieved entities 
    remote isolated function listA_PurInfoRecdPrcgCndnValidities(map<string|string[]> headers = {}, *ListA_PurInfoRecdPrcgCndnValiditiesQueries queries) returns CollectionOfA_PurInfoRecdPrcgCndnValidityWrapper|error {
        string resourcePath = string `/A_PurInfoRecdPrcgCndnValidity`;
        map<Encoding> queryParamEncoding = {"$orderby": {style: FORM, explode: false}, "$select": {style: FORM, explode: false}, "$expand": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Reads the pricing conditions of a purchasing record.
    #
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Retrieved entities 
    remote isolated function listA_PurInfoRecdPrcgCndns(map<string|string[]> headers = {}, *ListA_PurInfoRecdPrcgCndnsQueries queries) returns CollectionOfA_PurInfoRecdPrcgCndnWrapper|error {
        string resourcePath = string `/A_PurInfoRecdPrcgCndn`;
        map<Encoding> queryParamEncoding = {"$orderby": {style: FORM, explode: false}, "$select": {style: FORM, explode: false}, "$expand": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Reads the supplementary pricing conditions of a purchasing info record.
    #
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Retrieved entities 
    remote isolated function listA_PurInfoRecdSuplmntPrcgCndns(map<string|string[]> headers = {}, *ListA_PurInfoRecdSuplmntPrcgCndnsQueries queries) returns CollectionOfA_PurInfoRecdSuplmntPrcgCndnWrapper|error {
        string resourcePath = string `/A_PurInfoRecdSuplmntPrcgCndn`;
        map<Encoding> queryParamEncoding = {"$orderby": {style: FORM, explode: false}, "$select": {style: FORM, explode: false}, "$expand": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Reads the general information of a purchasing info record in the system.
    #
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Retrieved entities 
    remote isolated function listA_PurchasingInfoRecords(map<string|string[]> headers = {}, *ListA_PurchasingInfoRecordsQueries queries) returns CollectionOfA_PurchasingInfoRecordWrapper|error {
        string resourcePath = string `/A_PurchasingInfoRecord`;
        map<Encoding> queryParamEncoding = {"$orderby": {style: FORM, explode: false}, "$select": {style: FORM, explode: false}, "$expand": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Reads the purchasing PO text of all the purchasing info records in the system.
    #
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Retrieved entities 
    remote isolated function listA_PurgInfoRecdOrgPOTexts(map<string|string[]> headers = {}, *ListA_PurgInfoRecdOrgPOTextsQueries queries) returns CollectionOfA_PurgInfoRecdOrgPOTextWrapper|error {
        string resourcePath = string `/A_PurgInfoRecdOrgPOText`;
        map<Encoding> queryParamEncoding = {"$orderby": {style: FORM, explode: false}, "$select": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Reads the purchasing data of a purchasing info record in the system.
    #
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Retrieved entities 
    remote isolated function listA_PurgInfoRecdOrgPlantData(map<string|string[]> headers = {}, *ListA_PurgInfoRecdOrgPlantDataQueries queries) returns CollectionOfA_PurgInfoRecdOrgPlantDataWrapper|error {
        string resourcePath = string `/A_PurgInfoRecdOrgPlantData`;
        map<Encoding> queryParamEncoding = {"$orderby": {style: FORM, explode: false}, "$select": {style: FORM, explode: false}, "$expand": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Reads the pricing condition validity details of a purchasing info record.
    #
    # + ConditionRecord - Number of Condition Record
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Retrieved entities 
    remote isolated function listPurInfoRecdPrcgCndnValiditiesOfA_PurInfoRecdPrcgCndn(string ConditionRecord, map<string|string[]> headers = {}, *ListPurInfoRecdPrcgCndnValiditiesOfA_PurInfoRecdPrcgCndnQueries queries) returns CollectionOfA_PurInfoRecdPrcgCndnValidityWrapper|error {
        string resourcePath = string `/A_PurInfoRecdPrcgCndn('${getEncodedUri(ConditionRecord)}')/to_PurInfoRecdPrcgCndnValidity`;
        map<Encoding> queryParamEncoding = {"$orderby": {style: FORM, explode: false}, "$select": {style: FORM, explode: false}, "$expand": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Reads the supplementary pricing conditions of a purchasing info record.
    #
    # + ConditionRecord - Number of Condition Record
    # + ConditionSequentialNumber - Sequential number of the condition
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Retrieved entities 
    remote isolated function listPurInfoRecdPrcgCndnValiditiesOfA_PurInfoRecdSuplmntPrcgCndn(string ConditionRecord, string ConditionSequentialNumber, map<string|string[]> headers = {}, *ListPurInfoRecdPrcgCndnValiditiesOfA_PurInfoRecdSuplmntPrcgCndnQueries queries) returns CollectionOfA_PurInfoRecdPrcgCndnValidityWrapper|error {
        string resourcePath = string `/A_PurInfoRecdSuplmntPrcgCndn(ConditionRecord='${getEncodedUri(ConditionRecord)}',ConditionSequentialNumber='${getEncodedUri(ConditionSequentialNumber)}')/to_PurInfoRecdPrcgCndnValidity`;
        map<Encoding> queryParamEncoding = {"$orderby": {style: FORM, explode: false}, "$select": {style: FORM, explode: false}, "$expand": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Reads the pricing condition validity details of a purchasing info record.
    #
    # + PurchasingInfoRecord - Purchasing Info Record Number
    # + PurchasingInfoRecordCategory - Purchasing info record category
    # + PurchasingOrganization - Purchasing Organization
    # + Plant - Plant
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Retrieved entities 
    remote isolated function listPurInfoRecdPrcgCndnValiditiesOfA_PurgInfoRecdOrgPlantData(string PurchasingInfoRecord, string PurchasingInfoRecordCategory, string PurchasingOrganization, string Plant, map<string|string[]> headers = {}, *ListPurInfoRecdPrcgCndnValiditiesOfA_PurgInfoRecdOrgPlantDataQueries queries) returns CollectionOfA_PurInfoRecdPrcgCndnValidityWrapper|error {
        string resourcePath = string `/A_PurgInfoRecdOrgPlantData(PurchasingInfoRecord='${getEncodedUri(PurchasingInfoRecord)}',PurchasingInfoRecordCategory='${getEncodedUri(PurchasingInfoRecordCategory)}',PurchasingOrganization='${getEncodedUri(PurchasingOrganization)}',Plant='${getEncodedUri(Plant)}')/to_PurInfoRecdPrcgCndnValidity`;
        map<Encoding> queryParamEncoding = {"$orderby": {style: FORM, explode: false}, "$select": {style: FORM, explode: false}, "$expand": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Reads the purchasing PO text of a purchasing info record with respect to a purchasing organization.
    #
    # + PurchasingInfoRecord - Purchasing Info Record Number
    # + PurchasingInfoRecordCategory - Purchasing info record category
    # + PurchasingOrganization - Purchasing Organization
    # + Plant - Plant
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Retrieved entities 
    remote isolated function listPurInfoRecdPurOrgTextsOfA_PurgInfoRecdOrgPlantData(string PurchasingInfoRecord, string PurchasingInfoRecordCategory, string PurchasingOrganization, string Plant, map<string|string[]> headers = {}, *ListPurInfoRecdPurOrgTextsOfA_PurgInfoRecdOrgPlantDataQueries queries) returns CollectionOfA_PurgInfoRecdOrgPOTextWrapper|error {
        string resourcePath = string `/A_PurgInfoRecdOrgPlantData(PurchasingInfoRecord='${getEncodedUri(PurchasingInfoRecord)}',PurchasingInfoRecordCategory='${getEncodedUri(PurchasingInfoRecordCategory)}',PurchasingOrganization='${getEncodedUri(PurchasingOrganization)}',Plant='${getEncodedUri(Plant)}')/to_PurInfoRecdPurOrgText`;
        map<Encoding> queryParamEncoding = {"$orderby": {style: FORM, explode: false}, "$select": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Reads the supplementary pricing conditions of a purchasing info record.
    #
    # + ConditionRecord - Number of Condition Record
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Retrieved entities 
    remote isolated function listPurInfoRecdSuplmntPrcgCndnsOfA_PurInfoRecdPrcgCndn(string ConditionRecord, map<string|string[]> headers = {}, *ListPurInfoRecdSuplmntPrcgCndnsOfA_PurInfoRecdPrcgCndnQueries queries) returns CollectionOfA_PurInfoRecdSuplmntPrcgCndnWrapper|error {
        string resourcePath = string `/A_PurInfoRecdPrcgCndn('${getEncodedUri(ConditionRecord)}')/to_PurInfoRecdSuplmntPrcgCndn`;
        map<Encoding> queryParamEncoding = {"$orderby": {style: FORM, explode: false}, "$select": {style: FORM, explode: false}, "$expand": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Reads the pricing condition scales details with respect to the specified condition record in the system.
    #
    # + ConditionRecord - Number of Condition Record
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Retrieved entities 
    remote isolated function listPurgInfoPricingCndnRecdScalesOfA_PurInfoRecdPrcgCndn(string ConditionRecord, map<string|string[]> headers = {}, *ListPurgInfoPricingCndnRecdScalesOfA_PurInfoRecdPrcgCndnQueries queries) returns CollectionOfA_PurInfoRecdPrcgCndnScaleWrapper|error {
        string resourcePath = string `/A_PurInfoRecdPrcgCndn('${getEncodedUri(ConditionRecord)}')/to_PurgInfoPricingCndnRecdScale`;
        map<Encoding> queryParamEncoding = {"$orderby": {style: FORM, explode: false}, "$select": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Reads the pricing condition scales details with respect to the specified supplementary condition record in the system.
    #
    # + ConditionRecord - Number of Condition Record
    # + ConditionSequentialNumber - Sequential number of the condition
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Retrieved entities 
    remote isolated function listPurgInfoPricingCndnRecdScalesOfA_PurInfoRecdSuplmntPrcgCndn(string ConditionRecord, string ConditionSequentialNumber, map<string|string[]> headers = {}, *ListPurgInfoPricingCndnRecdScalesOfA_PurInfoRecdSuplmntPrcgCndnQueries queries) returns CollectionOfA_PurInfoRecdPrcgCndnScaleWrapper|error {
        string resourcePath = string `/A_PurInfoRecdSuplmntPrcgCndn(ConditionRecord='${getEncodedUri(ConditionRecord)}',ConditionSequentialNumber='${getEncodedUri(ConditionSequentialNumber)}')/to_PurgInfoPricingCndnRecdScale`;
        map<Encoding> queryParamEncoding = {"$orderby": {style: FORM, explode: false}, "$select": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Reads the purchasing data of a purchasing info record.
    #
    # + PurchasingInfoRecord - Purchasing Info Record Number
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Retrieved entities 
    remote isolated function listPurgInfoRecdOrgPlantDataOfA_PurchasingInfoRecord(string PurchasingInfoRecord, map<string|string[]> headers = {}, *ListPurgInfoRecdOrgPlantDataOfA_PurchasingInfoRecordQueries queries) returns CollectionOfA_PurgInfoRecdOrgPlantDataWrapper|error {
        string resourcePath = string `/A_PurchasingInfoRecord('${getEncodedUri(PurchasingInfoRecord)}')/to_PurgInfoRecdOrgPlantData`;
        map<Encoding> queryParamEncoding = {"$orderby": {style: FORM, explode: false}, "$select": {style: FORM, explode: false}, "$expand": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Updates the pricing conditions of a purchasing info record.
    #
    # + ConditionRecord - Number of Condition Record
    # + headers - Headers to be sent with the request 
    # + payload - New property values 
    # + return - Success 
    remote isolated function patchA_PurInfoRecdPrcgCndn(string ConditionRecord, Modified\ A_PurInfoRecdPrcgCndnType payload, map<string|string[]> headers = {}) returns http:Response|error {
        string resourcePath = string `/A_PurInfoRecdPrcgCndn('${getEncodedUri(ConditionRecord)}')`;
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->patch(resourcePath, request, headers);
    }

    # Updates the pricing condition scales details of a condition record in the system.
    #
    # + ConditionRecord - Number of Condition Record
    # + ConditionSequentialNumber - Sequential number of the condition
    # + ConditionScaleLine - Current number of the line scale
    # + headers - Headers to be sent with the request 
    # + payload - New property values 
    # + return - Success 
    remote isolated function patchA_PurInfoRecdPrcgCndnScale(string ConditionRecord, string ConditionSequentialNumber, string ConditionScaleLine, Modified\ A_PurInfoRecdPrcgCndnScaleType payload, map<string|string[]> headers = {}) returns http:Response|error {
        string resourcePath = string `/A_PurInfoRecdPrcgCndnScale(ConditionRecord='${getEncodedUri(ConditionRecord)}',ConditionSequentialNumber='${getEncodedUri(ConditionSequentialNumber)}',ConditionScaleLine='${getEncodedUri(ConditionScaleLine)}')`;
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->patch(resourcePath, request, headers);
    }

    # Updates the pricing condition validity details of a purchasing info record.
    #
    # + ConditionRecord - Number of Condition Record
    # + ConditionValidityEndDate - Validity end date of the condition record
    # + headers - Headers to be sent with the request 
    # + payload - New property values 
    # + return - Success 
    remote isolated function patchA_PurInfoRecdPrcgCndnValidity(string ConditionRecord, string ConditionValidityEndDate, Modified\ A_PurInfoRecdPrcgCndnValidityType payload, map<string|string[]> headers = {}) returns http:Response|error {
        string resourcePath = string `/A_PurInfoRecdPrcgCndnValidity(ConditionRecord='${getEncodedUri(ConditionRecord)}',ConditionValidityEndDate=datetime'${getEncodedUri(ConditionValidityEndDate)}')`;
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->patch(resourcePath, request, headers);
    }

    # Updates the supplementary pricing conditions of a purchasing info record.
    #
    # + ConditionRecord - Number of Condition Record
    # + ConditionSequentialNumber - Sequential number of the condition
    # + headers - Headers to be sent with the request 
    # + payload - New property values 
    # + return - Success 
    remote isolated function patchA_PurInfoRecdSuplmntPrcgCndn(string ConditionRecord, string ConditionSequentialNumber, Modified\ A_PurInfoRecdSuplmntPrcgCndnType payload, map<string|string[]> headers = {}) returns http:Response|error {
        string resourcePath = string `/A_PurInfoRecdSuplmntPrcgCndn(ConditionRecord='${getEncodedUri(ConditionRecord)}',ConditionSequentialNumber='${getEncodedUri(ConditionSequentialNumber)}')`;
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->patch(resourcePath, request, headers);
    }

    # Updates the general information of a purchasing info record.
    #
    # + PurchasingInfoRecord - Purchasing Info Record Number
    # + headers - Headers to be sent with the request 
    # + payload - New property values 
    # + return - Success 
    remote isolated function patchA_PurchasingInfoRecord(string PurchasingInfoRecord, Modified\ A_PurchasingInfoRecordType payload, map<string|string[]> headers = {}) returns http:Response|error {
        string resourcePath = string `/A_PurchasingInfoRecord('${getEncodedUri(PurchasingInfoRecord)}')`;
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->patch(resourcePath, request, headers);
    }

    # Updates the purchasing PO text of a purchasing info record.
    #
    # + Language - Language Key
    # + DocumentText - Text ID
    # + TechnicalObjectType - Texts: application object
    # + ArchObjectNumber - Name
    # + PurchasingInfoRecord - Purchasing Info Record Number
    # + PurchasingOrganization - Purchasing Organization
    # + PurchasingInfoRecordCategory - Purchasing info record category
    # + Plant - Plant
    # + headers - Headers to be sent with the request 
    # + payload - New property values 
    # + return - Success 
    remote isolated function patchA_PurgInfoRecdOrgPOText(string Language, string DocumentText, string TechnicalObjectType, string ArchObjectNumber, string PurchasingInfoRecord, string PurchasingOrganization, string PurchasingInfoRecordCategory, string Plant, Modified\ A_PurgInfoRecdOrgPOTextType payload, map<string|string[]> headers = {}) returns http:Response|error {
        string resourcePath = string `/A_PurgInfoRecdOrgPOText(Language='${getEncodedUri(Language)}',DocumentText='${getEncodedUri(DocumentText)}',TechnicalObjectType='${getEncodedUri(TechnicalObjectType)}',ArchObjectNumber='${getEncodedUri(ArchObjectNumber)}',PurchasingInfoRecord='${getEncodedUri(PurchasingInfoRecord)}',PurchasingOrganization='${getEncodedUri(PurchasingOrganization)}',PurchasingInfoRecordCategory='${getEncodedUri(PurchasingInfoRecordCategory)}',Plant='${getEncodedUri(Plant)}')`;
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->patch(resourcePath, request, headers);
    }

    # Updates the purchasing information of a purchasing info record.
    #
    # + PurchasingInfoRecord - Purchasing Info Record Number
    # + PurchasingInfoRecordCategory - Purchasing info record category
    # + PurchasingOrganization - Purchasing Organization
    # + Plant - Plant
    # + headers - Headers to be sent with the request 
    # + payload - New property values 
    # + return - Success 
    remote isolated function patchA_PurgInfoRecdOrgPlantData(string PurchasingInfoRecord, string PurchasingInfoRecordCategory, string PurchasingOrganization, string Plant, Modified\ A_PurgInfoRecdOrgPlantDataType payload, map<string|string[]> headers = {}) returns http:Response|error {
        string resourcePath = string `/A_PurgInfoRecdOrgPlantData(PurchasingInfoRecord='${getEncodedUri(PurchasingInfoRecord)}',PurchasingInfoRecordCategory='${getEncodedUri(PurchasingInfoRecordCategory)}',PurchasingOrganization='${getEncodedUri(PurchasingOrganization)}',Plant='${getEncodedUri(Plant)}')`;
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->patch(resourcePath, request, headers);
    }
}
